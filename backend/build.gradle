plugins {
  id "scala"
  id "idea"
  id "application"
  id "com.github.johnrengelman.shadow" version "4.0.3"
}

mainClassName = "JettyLauncher"

project.ext {
  scalaBinary = "2.11"
  scalaVersion = "2.11.8"
  scalatraVersion = "2.3.1"
  javaVersion = "1.8"
  println("Common: Scala Binary: " + scalaBinary + " - Scala Version: " + scalaVersion + " - Java: " + javaVersion)
}

configurations.all {
  resolutionStrategy {
    // See reason: http://stackoverflow.com/a/23870656/992426
    force "xml-apis:xml-apis:1.4.01"
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

shadowJar {
  from(project.rootDir.absolutePath + "/backend/db") {
    include "rms.mv.db"
    into("db")
  }
  from(project.rootDir.absolutePath + "/backend/src/main") {
    include "webapp/**"
    into ""
  }
  zip64 = true
  mergeServiceFiles()
  classifier = "all"
}

tasks.withType(ScalaCompile) {
  sourceCompatibility = project.javaVersion
  targetCompatibility = project.javaVersion
}

dependencies {
  testCompile "junit:junit:4.12"
  testCompile "org.scalatest:scalatest_$project.scalaBinary:3.0.0"
  compile "org.scala-lang:scala-library:$project.scalaVersion"
  compile "org.scala-lang:scala-compiler:$project.scalaVersion"
  compile "org.scala-lang:scala-reflect:$project.scalaVersion"
  compile "org.scala-lang:scalap:$project.scalaVersion"
  compile "org.scala-lang.modules:scala-parser-combinators_$project.scalaBinary:1.0.4"
  
  // Web server
  compile "org.scalatra:scalatra_$project.scalaBinary:$project.scalatraVersion"
  compile "org.scalatra:scalatra-scalate_$project.scalaBinary:$project.scalatraVersion"
  compile "org.scalatra.scalate:scalate-core_$project.scalaBinary:1.7.0"
  compile "org.scalatra:scalatra-json_$project.scalaBinary:$project.scalatraVersion"
  compile "org.scalatra:scalatra-auth_$project.scalaBinary:$project.scalatraVersion"
  
  compile(group: "javax.servlet", name: "javax.servlet-api", version: "3.1.0") { force = true }
  compile "org.eclipse.jetty:jetty-webapp:9.3.11.v20160721"
  
  compile "ch.qos.logback:logback-classic:1.1.2"
  compile "com.typesafe.slick:slick_$project.scalaBinary:3.1.1"
  compile "com.typesafe:config:1.3.0"
  compile "com.h2database:h2:1.4.190"
  compile "org.json4s:json4s-jackson_$project.scalaBinary:3.3.0.RC3"
  compile "org.json4s:json4s-native_$project.scalaBinary:3.3.0.RC3"
  compile "com.mchange:c3p0:0.9.5.1"
  
  // Mail
  compile 'com.sendgrid:sendgrid-java:3.1.0'
  
  // Image processing
  compile "com.sksamuel.scrimage:scrimage-core_$project.scalaBinary:2.0.1"
  compile "com.sksamuel.scrimage:scrimage-io_$project.scalaBinary:2.0.1"
  compile "com.sksamuel.scrimage:scrimage-filters_$project.scalaBinary:2.0.1"
  
  compile "org.apache.xmlgraphics:batik-codec:1.7"
  compile "me.lessis:courier_$project.scalaBinary:0.1.3"
  compile "com.dropbox.core:dropbox-core-sdk:1.7.7"
}

test {
  testLogging {
    showStandardStreams = true
  }
}

task resolveDependencies(group: "mito", description: "Resolves all projects dependencies from the repository.") {
  doLast {
    rootProject.allprojects { project ->
      project.buildscript.configurations.forEach { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }
      
      project.configurations.forEach { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }
    }
  }
}
